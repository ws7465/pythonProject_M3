# Задача "Счётчик вызовов":
#
#  Вам необходимо написать 3 функции:
#
#     Функция count_calls подсчитывающая вызовы остальных функций.
#     Функция string_info принимает аргумент - строку и возвращает
#        кортеж из: длины этой строки, строку в верхнем регистре,
#        строку в нижнем регистре.
#     Функция is_contains принимает два аргумента: строку и список,
#         и возвращает True, если строка находится в этом списке,
#         False - если отсутствует. Регистром строки при проверке
#         пренебречь: UrbaN ~ URBAN.
#
#  Пункты задачи:
#
#  1.  Создать переменную calls = 0 вне функций.
#  2.  Создать функцию count_calls и изменять в ней значение
#       переменной calls. Эта функция должна вызываться в остальных
#       двух функциях.
#  3.  Создать функцию string_info с параметром string и реализовать
#       логику работы по описанию.
#  4.  Создать функцию is_contains с двумя параметрами
#       string и list_to_search, реализовать логику работы
#       по описанию.
#  5.  Вызвать соответствующие функции string_info и is_contains
#       произвольное кол-во раз с произвольными данными.
#  6.  Вывести значение переменной calls на экран(в консоль).
#
#
#
calls = 0 # глобальная переменная счётчика вызовов
def count_calls() : # ф-ция - счётчик вызовов
    global calls # определение глобальной переменной
    calls += 1 # наращивание счётчика
#
def string_info(string) : # ф-ция вывода кортежа полученного из строки
    tuple_ = len(string), string.upper(), string.lower() # кортеж
    count_calls() # вызов счётчика вызовов
    return tuple_ # возврат значения кортежа
#
def is_contains(str_, list_) : # ф-ция анализа содержимости строки в списке
    listu = [s.upper() for s in list_] # перевод списка в верхний регистр
    stru = str_.upper() # перевод строки в верхний регистр
    count_calls()  # вызов счётчика вызовов
    return stru in listu # возврат результата анализа
#
# печать в консоли тестовых примеров
print(string_info('Capybara'))
print(string_info('Armageddon'))
print(is_contains('Urban', ['ban', 'BaNaN', 'urBAN'])) # Urban ~ urBAN
print(is_contains('cycle', ['recycling', 'cyclic'])) # No matches
print(calls)
#
# Вывод на консоль: - ДОЛЖНО БЫТЬ
# (8, 'CAPYBARA', 'capybara')
# (10, 'ARMAGEDDON', 'armageddon')
# True
# False
# 4
#
# конец задачи
#




